module yMux1(z, a, b, c);
	output z;
	input a, b, c;
	wire notC, upper, lower;
	not my_not(notC, c);
	and upperAnd(upper, a, notC);
	and lowerAnd(lower, c, b);
	or my_or(z, upper, lower);
endmodule
module yMux(z, a, b, c);
	parameter SIZE = 2;
	output [SIZE-1:0] z;
	input [SIZE-1:0] a, b;
	input c;
	yMux1 mine[SIZE-1:0] (z, a, b, c);
endmodule
module yMux4to1(z, a0, a1, a2, a3, c);
	parameter SIZE = 2;
	output [SIZE-1:0] z;
	input [SIZE-1:0] a0, a1, a2, a3;
	input [1:0] c;
	wire [SIZE-1:0] zLo, zHi;
	yMux #(SIZE) lo(zLo, a0, a1, c[0]);
	yMux #(SIZE) hi(zHi, a2, a3, c[0]);
	yMux #(SIZE) final(z, zLo, zHi, c[1]);
endmodule
module yMux2(z, a, b, c);
	output [1:0] z;
	input [1:0] a, b;
	input c;
	yMux1 upper(z[0], a[0], b[0], c);
	yMux1 lower(z[1], a[1], b[1], c);
endmodule
module yAdder(z, cout, a, b, cin);
	output [31:0] z;
	output cout;
	input [31:0] a, b;
	input cin;
	wire[31:0] in, out;
	yAdder1 mine[31:0](
z, out, a, b, in);
	assign in[0] = cin;
	assign in[31:1] = out[30:0];
endmodule
module yAdder1(z, cout, a, b, cin);
	output z, cout;
	input a, b, cin;
	xor left_xor(tmp, a, b);
	xor right_xor(z, cin, tmp);
	and left_and(outL, a, b);
	and right_and(outR, tmp, cin);
	or my_or(cout, outR, outL);
endmodule
